---
-  name: Creating user repo
   user:
     name: "{{ aptly_user }}"
     shell: /bin/nologin

- name: Install aptly debian repository
  apt_repository:
    repo: 'deb http://repo.aptly.info/ squeeze main'
    state: present
    update_cache: yes

- name: Import aptly key
  apt_key:
    id: 2A194991
    keyserver: "{{ aptly_keyserver }}"

- name: Install necessary packages
  apt: name={{ item }} state=present update_cache=yes
  with_items:
      - aptly={{ aptly_version }}
      - gnupg
      - "{{ aptly_webserver }}"

- name: Copy config file
  template:
    src: aptly.conf.j2
    dest: /etc/aptly.conf
    owner: root
    group: root
    mode: 0644

- name: Check if key is already present
  command: gpg --list-secret-keys | grep -q "{{ aptly_secret_key_id }}"
  when: aptly_secret_key_id is defined
  register: key_present
  changed_when: False
  failed_when: False

- name: Upload repository key
  copy:
      src: "{{ aptly_secret_key_path }}/{{ aptly_secret_key_file }}"
      dest: /tmp
      owner: "{{ aptly_user }}"
      group: "{{ aptly_user }}"
      mode: 0400
  when: aptly_secret_key_id is defined and key_present.rc != 0

- name: Import repository key to gnupg
  shell: gpg --allow-secret-key-import --import /tmp/{{ aptly_secret_key_file }}
  when: aptly_secret_key_id is defined and key_present.rc != 0

-
    name: Remove secret key from remote host
    file: path="/tmp/{{ aptly_secret_key_file }}" state=absent
    when: aptly_secret_key_id is defined
-
    name: Create repositories
    shell: >
        (aptly repo list -raw | grep -q "{{ item.name }}" )
        || (
            aptly repo create \
                --comment "{{ item.comment|default('\"\"') }}" \
                --distribution "{{ item.distribution|default('main') }}" \
                --component "{{ item.component|default('main') }}" \
                "{{ item.name }}"
        )
    with_items: aptly_repositories
    when: aptly_repositories is defined

- name: Ensure import dir is present
  file:
    path: "{{ aptly_import_dir }}"
    state: directory
  when: aptly_repositories is defined

- name: Import packages to repository
  command: aptly repo add {{ item.name }} {{ aptly_import_dir }}
  with_items: aptly_repositories
  when: aptly_repositories is defined

-
    name: Publish repositories
    shell: >
        (aptly publish list | grep -q "{{ item.name }}")
        || aptly publish repo \
            --gpg-key "{{ aptly_secret_key_id }}" \
            --architectures "{{ item.architectures|default('amd64,i386') }}" \
            "{{ item.name }}" \
            "{{ item.prefix|default(item.name) }}"
    with_items: aptly_repositories
    when: aptly_repositories is defined

- name: Update published repos
  command: aptly publish update {{ item.distribution }} {{ item.name }}
  with_items: aptly_repositories
  when: aptly_repositories is defined

-
    name: remove nginx 'it works' page
    file: path=/etc/nginx/sites-enabled/default state=absent
    when: aptly_webserver == "nginx"
-
    name: Upload nginx configuration file
    template: src=nginx-aptly.conf.j2 dest=/etc/nginx/sites-available/aptly.conf owner=root group=root mode=644
    notify: restart nginx
    when: aptly_webserver == "nginx"
-
    name: Creating nginx configuration symlinks
    file: src=/etc/nginx/sites-available/aptly.conf dest=/etc/nginx/sites-enabled/aptly.conf state=link
    notify: restart nginx
    when: aptly_webserver == "nginx"

- name: Copy apache config
  template:
    src: apache.j2
    dest: /etc/apache2/sites-available/aptly.conf
    owner: root
    group: root
    mode: 0644
  when: aptly_webserver == "apache2"

- name: Enable apache vhost
  command: a2ensite aptly.conf
  args:
    creates: /etc/apache2/sites-enabled/aptly.conf
  notify: restart apache2
  when: aptly_webserver == "apache2"

- name: Import keys of mirrored repos
  command: gpg --no-default-keyring --keyring trustedkeys.gpg --keyserver {{ aptly_keyserver }} --recv-keys {{ item }}
  with_items: aptly_mirror_keys 
  when: aptly_mirrors is defined

- name: Create mirrors
  command: "aptly mirror create -architectures=amd64 -filter='{{ aptly_filter | join (\" | \") }}' {{ item.name }} {{ item.url }} {{ item.component }}"
  with_items: aptly_mirrors
  when: aptly_mirrors is defined
  failed_when: False

- name: Update mirrors
  command: aptly mirror update {{ item.name }}
  with_items: aptly_mirrors
  when: aptly_mirrors is defined

- name: Copy daily cronjob
  template:
    src: cron.j2
    dest: /etc/cron.daily/aptly
    owner: root
    group: root
    mode: 0700
  when: aptly_mirrors is defined
